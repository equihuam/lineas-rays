---
title: "Líneas de investigación RAYS"
format: 
  html: default
  revealjs: default

execute: 
  cache: false
  freeze: auto
---

## Líneas de investigación {.smaller}

```{python}
#| label: inicio
#| echo: false

# Reimportar bibliotecas necesarias después del reinicio del entorno
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_distances
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.spatial.distance import squareform
from scipy.cluster.hierarchy import leaves_list
from scipy.cluster.hierarchy import fcluster
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tabulate import tabulate
from IPython.display import Markdown, HTML, display
from itables import show

# Lista actualizada de temas proporcionados por el usuario
temas = {
  "id": ["tema_" + str(i + 1) for i in range(8)],
  "tema corto": [
    "Cambio global",
    "Conservación comunitaria",
    "Evaluación ambiental",
    "Estudios socioecológicos",
    "Gestión del agua",
    "Justicia socioambiental",
    "Ecología de insectos",
    "Monitoreo ambiental"],
  "tema": [
      "Cambio global, sostenibilidad y dinámica del paisaje",
      "Conservación y manejo comunitario de la biodiversidad",
      "Evaluación ambiental, restauración y manejo de ecosistemas",
      "Estudios sociocognitivos y herramientas socioecológicas para la sustentabilidad",
      "Gestión del agua y procesos hidrológicos",
      "Políticas y justicia socioambiental",
      "Sistemática y ecología de insectos",
      "Tecnología para el monitoreo ambiental"]}

temas_df = pd.DataFrame(temas)

# Formas de tabulación de DataFrame
#Markdown(tabulate(temas_df, showindex=False, 
#          headers=temas_df.columns ))
#           
#show(temas_df[["tema corto", "tema"]])

temas_df[["tema corto", "tema"]].style.hide().set_properties(**{'font-size': '18pt'})

```

\ 
\ 


## Distancia "semántica" entre temas

```{python}
#| label: dist-temas
#| echo: false

# Vectorizar los temas con TF-IDF
vectorizer = TfidfVectorizer()
X_nuevos = vectorizer.fit_transform(temas_df["tema"])

# Calcular la matriz de distancias (coseno)
dist_matrix_nuevos = cosine_distances(X_nuevos)

# Crear un DataFrame para visualización
dist_df_nuevos = pd.DataFrame(dist_matrix_nuevos, 
                              index=temas_df["tema corto"], 
                              columns=temas_df["tema corto"])

# Graficar el mapa de calor con la matriz de distancias calculada
plt.figure(figsize=(7.2, 4.7))
sns.set(font_scale=0.55)
# cmap="YlGnBu" o YlOrRd
sns.heatmap(dist_df_nuevos, annot=True, cmap="YlGnBu", 
            xticklabels=True, yticklabels=True)
#plt.title("Matriz de calor: Distancia semántica entre temas", fontsize=9)
plt.xticks(rotation=45, ha='right', fontsize=8)
plt.yticks(rotation=0, fontsize=8)
plt.ylabel(None)
plt.xlabel(None)
plt.tight_layout()
plt.show()


```
## Relevancia vs originalidad



```{python}
#| label: relevancia
#| echo: false

# Tema actualizado con estimaciones de relevancia y originalidad
data_updated = {
    "Tema": [
        "Cambio global, sostenibilidad y dinámica del paisaje",
        "Conservación y manejo comunitario de la biodiversidad",
        "Evaluación ambiental, restauración y manejo de ecosistemas",
        "Estudios sociocognitivos y herramientas socioecológicas para la sustentabilidad",
        "Gestión del agua y procesos hidrológicos",
        "Políticas y justicia socioambiental",
        "Sistemática y ecología de insectos",
        "Tecnología para el monitoreo ambiental"
    ],
    "Relevancia": [9, 8, 8, 7, 8, 7, 7, 7],
    "Originalidad": [6, 7, 6, 8, 6, 8, 8, 7]
}

temas_df["relevancia"] = data_updated["Relevancia"]
temas_df["originalidad"] = data_updated["Originalidad"]

df_updated = temas_df


    
class_specific_css = ".small_font { font-size: 2rem; }"
display(HTML(f"<style>{class_specific_css}</style>" ""))

show(temas_df[["tema corto", "originalidad", "relevancia"]].sort_values(by=["originalidad"],ascending = False),
     classes="display nowrap small_font")

```




##

```{python}
#| label: rel-vs-orig
#| echo: false

# Asignar un color distinto a cada tema
colors = plt.cm.tab10.colors  # paleta de colores
df_updated["Color"] = colors[:len(df_updated)]
temas_df["color"] = colors[:len(df_updated)]

# Agregar pequeños desplazamientos aleatorios controlados para separar puntos cercanos
np.random.seed(42)
jitter_strength = 0.15

temas_df["Relevancia_jitter"] = df_updated["relevancia"] + \
                                np.random.uniform(-jitter_strength, 
                                                   jitter_strength, 
                                                   size=len(df_updated))
temas_df["Originalidad_jitter"] = df_updated["originalidad"] + \
                                  np.random.uniform(-jitter_strength, 
                                                     jitter_strength, 
                                                     size=len(df_updated))

# Crear el gráfico de dispersión con los puntos ajustados
plt.figure(figsize=(10, 6))
for i, row in temas_df.iterrows():
    plt.scatter(row["Relevancia_jitter"], row["Originalidad_jitter"], color=row["color"], s=100)

# Añadir la leyenda con los mismos colores
for i, row in temas_df.iterrows():
    plt.plot([], [], 'o', color=row["color"], label=row["tema"])

plt.title("Relevancia vs. Originalidad de Temas", fontsize=14)
plt.xlabel("Relevancia (1-10)", fontsize=12)
plt.ylabel("Originalidad (1-10)", fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.xlim(5.5, 9.5)
plt.ylim(5.5, 9.5)
plt.grid(True)
plt.legend(loc='best', bbox_to_anchor=(0.97, 0.95), fontsize=8)
plt.tight_layout()

plt.show()
```



## Resumen de Relevancia (¿popularidad?)

Muy alta: Cambio climático, restauración y monitoreo con IA — reciben la mayoría de las publicaciones y financiación.

Alta: Conservación comunitaria, gestión del agua y NbS — con fuerte respaldo institucional y agendas globales.

Media: Políticas socioambientales y estudios sociocognitivos — en ascenso interdisciplinar, con creciente relevancia social.

Moderada: Sistemática de insectos — campo especializado, pero beneficiado por tendencias tecnológicas.





## Dendrograma de temas {style="text-align: center;"}

\ 

```{python}
#| label: dendro
#| echo: false
#| fig-align: center


# Vectorización TF-IDF
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(temas_df["tema"])

# Calcular matriz de distancias coseno
dist_matrix = cosine_distances(X)
condensed_dist = squareform(dist_matrix)

# Generar clusters jerárquicos
linked = linkage(condensed_dist, method='ward')

# Graficar dendrograma con etiquetas cortas
plt.figure(figsize=(10, 8))
dendrogram(
    linked,
    labels=temas_df["tema corto"].to_list(),
    orientation='top',
    distance_sort='ascending',
    leaf_rotation=45
)
plt.tight_layout()
plt.yticks(fontsize=14)
plt.yticks(fontsize=14)
plt.show()

```


```{python}
#| label: leyenda
#| echo: false
#| eval: false

class_specific_css = """
                       .small_font { font-size: 0.6rem; } 
                       .dataTable th {font-size: 0.9rem;}
                     """
display(HTML(f"<style>{class_specific_css}</style>" ""))

show(temas_df[["tema corto", "tema"]],
     classes="display nowrap small_font")



```


\ 
\ 

## Temas y actores clave {style="text-align: center;"}


```{python}
#| label: vincula-actores
#| echo: false
#| fig-align: center

# Definir los actores clave a vincular
actores_clave = ["Gubernamentales", "Académicos", "Comunidades rurales", "Indígenas", "Jóvenes", "Mujeres"]

# Establecer relaciones estimadas entre temas y actores
tema_actor_clave_data = {
    "Cambio global": ["Gubernamentales", 
                      "Académicos", 
                      "Jóvenes"],
    "Conservación comunitaria": ["Indígenas", 
                                 "Comunidades rurales", 
                                 "Académicos", 
                                 "Mujeres"],
    "Evaluación ambiental": ["Gubernamentales", 
                             "Comunidades rurales", 
                             "Académicos"],
    "Estudios ocioecológicos": ["Jóvenes", 
                                "Mujeres", 
                                "Académicos", 
                                "Indígenas"],
    "Gestión del agua": ["Gubernamentales", 
                         "Comunidades rurales", 
                         "Indígenas", 
                         "Académicos"],
    "Justicia socioambiental": ["Gubernamentales", 
                                "Indígenas", 
                                "Mujeres", 
                                "Académicos", 
                                "Jóvenes"],
    "Ecología de insectos": ["Académicos", 
                             "Gubernamentales"],
    "Monitoreo ambiental": ["Gubernamentales", 
                            "Académicos", 
                            "Jóvenes"]
}

# Crear DataFrame de vínculos
vinculos = []
for tema, actores in tema_actor_clave_data.items():
    for actor in actores:
        vinculos.append((tema, actor))

df_vinculos = pd.DataFrame(vinculos, columns=["Tema", "Actor Asociado"])

# Crear un nuevo grafo
G_vinculos = nx.Graph()

# Agregar nodos y bordes desde el DataFrame
for _, row in df_vinculos.iterrows():
    tema = row["Tema"]
    actor = row["Actor Asociado"]
    G_vinculos.add_node(tema, type='tema')
    G_vinculos.add_node(actor, type='actor')
    G_vinculos.add_edge(tema, actor)

# Posiciones para graficar
pos = nx.spring_layout(G_vinculos, seed=42, k=0.2)

# Separar nodos por tipo
tema_nodes = [n for n in G_vinculos.nodes if G_vinculos.nodes[n]['type'] == 'tema']
actor_nodes = [n for n in G_vinculos.nodes if G_vinculos.nodes[n]['type'] == 'actor']

# Graficar
plt.figure(figsize=(12, 9))
nx.draw_networkx_nodes(G_vinculos, pos, nodelist=tema_nodes, node_shape='s', node_color='lightgreen', node_size=500, label="Temas")
nx.draw_networkx_nodes(G_vinculos, pos, nodelist=actor_nodes, node_color='lightcoral', node_size=500, label="Actores")
nx.draw_networkx_edges(G_vinculos, pos)
nx.draw_networkx_labels(G_vinculos, pos, font_size=14)

plt.axis('off')
plt.tight_layout()
plt.show()

```


## Temas y Actores Transversales {style="text-align: center;"}

```{python}
#| label: act-transversal
#| echo: false
#| fig-align: center

# Nuevos actores clave propuestos
nuevos_actores = [
    "Comunidades locales/rurales e indígenas",
    "Gobiernos y tomadores de decisiones",
    "Instituciones académicas y científicas",
    "Organizaciones sociales y ONGs",
    "Productores rurales / campesinos"
]
 

# Relaciones estimadas entre los temas y estos nuevos actores
tema_nuevos_actores = {
    "Cambio global ": ["Gobiernos y tomadores de decisiones", 
                       "Instituciones académicas y científicas"],
    "Conservación comunitaria": ["Comunidades locales/rurales e indígenas", 
                                 "Organizaciones sociales y ONGs", 
                                 "Instituciones académicas y científicas"],
    "Evaluación ambiental": ["Gobiernos y tomadores de decisiones", 
                             "Comunidades locales/rurales e indígenas", 
                             "Instituciones académicas y científicas"],
    "Estudios socioecológicos ": ["Organizaciones sociales y ONGs", 
                                  "Instituciones académicas y científicas", 
                                  "Comunidades locales/rurales e indígenas"],
    "Gestión del agua ": ["Gobiernos y tomadores de decisiones", 
                          "Comunidades locales/rurales e indígenas", 
                          "Instituciones académicas y científicas"],
    "Justicia socioambiental": ["Organizaciones sociales y ONGs", 
                                "Gobiernos y tomadores de decisiones", 
                                "Comunidades locales/rurales e indígenas"],
    "Ecología de insectos": ["Instituciones académicas y científicas", 
                             "Productores rurales / campesinos"],
    "Monitoreo ambiental": ["Gobiernos y tomadores de decisiones", 
                            "Instituciones académicas y científicas"]}


# Crear DataFrame de vínculos
nuevos_vinculos = []
for tema, actores in tema_nuevos_actores.items():
    for actor in actores:
        nuevos_vinculos.append((tema, actor))

df_nuevos_vinculos = pd.DataFrame(nuevos_vinculos, columns=["Tema", "Actor Asociado"])

# Crear grafo
G_nuevos = nx.Graph()

# Agregar nodos y relaciones
for _, row in df_nuevos_vinculos.iterrows():
    G_nuevos.add_node(row["Tema"], type='tema')
    G_nuevos.add_node(row["Actor Asociado"], type='actor')
    G_nuevos.add_edge(row["Tema"], row["Actor Asociado"])

# Posicionamiento
pos = nx.spring_layout(G_nuevos, seed=42, k=0.2)

# Separar nodos
tema_nodes = [n for n in G_nuevos.nodes if G_nuevos.nodes[n]['type'] == 'tema']
actor_nodes = [n for n in G_nuevos.nodes if G_nuevos.nodes[n]['type'] == 'actor']

# Graficar
plt.figure(figsize=(15.2, 8.5))
nx.draw_networkx_nodes(G_nuevos, pos, nodelist=tema_nodes, node_shape='s', node_color='lightgreen', node_size=700, label="Temas")
nx.draw_networkx_nodes(G_nuevos, pos, nodelist=actor_nodes, node_color='lightcoral', node_size=600, label="Actores")
nx.draw_networkx_edges(G_nuevos, pos)
nx.draw_networkx_labels(G_nuevos, pos, font_size=10)

plt.axis('off')
plt.show()

```

\ 
\ 

### Cluster temáticos

```{python}
#| label: clusters
#| echo: false

# Obtener el orden de los temas desde el dendrograma
ordered_indices = leaves_list(linked)
temas_ordenados = [temas_df.tema[i] for i in ordered_indices]

# Concatenar los temas por cercanía temática
temas_concatenados = " → ".join(temas_ordenados)

temas_concatenados

# Definir número de clusters (p. ej., 3 para visualizar grandes bloques temáticos)
num_clusters = 3
clusters = fcluster(linked, num_clusters, criterion='maxclust')

# Crear DataFrame con temas y su cluster
df_clusters = pd.DataFrame({
    "Tema": temas_df["tema"],
    "Corto": temas_df["tema corto"], 
    "Cluster": clusters
}).sort_values("Cluster")

# Crear grafo para el mapa conceptual
G_conceptual = nx.Graph()

# Colores para clusters
cluster_colors = {
    1: 'lightblue',
    2: 'lightgreen',
    3: 'lightcoral'
}

# Agregar nodos con color según cluster
for _, row in df_clusters.iterrows():
    G_conceptual.add_node(row["Tema"], cluster=row["Cluster"])

# Conectar nodos consecutivos por ordenamiento jerárquico
for i in range(len(temas_ordenados) - 1):
    G_conceptual.add_edge(temas_ordenados[i], temas_ordenados[i+1])

# Posición con spring layout
pos = nx.spring_layout(G_conceptual, seed=42, k=1.2)

# Dibujar grafo con colores por cluster
plt.figure(figsize=(5, 5))

for cluster in df_clusters["Cluster"].unique():
    cluster_nodes = df_clusters[df_clusters["Cluster"] == cluster]["Tema"].tolist()
    nx.draw_networkx_nodes(G_conceptual, pos, nodelist=cluster_nodes, node_color=cluster_colors[cluster], node_size=500, label=f"Cluster {cluster}")

nx.draw_networkx_edges(G_conceptual, pos)
nx.draw_networkx_labels(G_conceptual, pos, font_size=9)

plt.title("Mapa conceptual: Temas agrupados por cercanía semántica (Clusters)")
plt.axis('off')
plt.legend()
plt.tight_layout()
plt.show()


```


**Cluster 1:** Sistemas naturales y cambio global

Temas incluidos:

Cambio global, sostenibilidad y dinámica del paisaje

Gestión del agua y procesos hidrológicos

Sistemática y ecología de insectos

Descripción:
Este grupo reúne temas relacionados con los procesos ecológicos a gran escala, la dinámica de los sistemas terrestres y el papel de la biodiversidad (en especial los insectos) en la regulación ambiental. La gestión del agua aparece como eje transversal que conecta el cambio climático con necesidades concretas de adaptación ecológica. Tiene fuerte anclaje en la ciencia básica, la modelación y el monitoreo.

**Cluster 2:** Restauración, conservación y justicia territorial

Temas incluidos:

Conservación y manejo comunitario de la biodiversidad

Evaluación ambiental, restauración y manejo de ecosistemas

Políticas y justicia socioambiental

Descripción:
Aquí se agrupan temas con una fuerte dimensión territorial y sociopolítica, que abordan la restauración ecológica, la conservación participativa y la exigencia de derechos en contextos de conflictividad ambiental. Enfatiza la relación entre las comunidades (especialmente rurales e indígenas), las instituciones y el acceso equitativo a los bienes comunes. Se nutre de enfoques ecológicos aplicados, gobernanza y políticas públicas.

**Cluster 3:** Herramientas sociales y tecnológicas para la sustentabilidad

Temas incluidos:

Estudios sociocognitivos y herramientas socioecológicas para la sustentabilidad

Tecnología para el monitoreo ambiental

Descripción:
Este grupo destaca por su enfoque instrumental y metodológico: por un lado, el análisis de cómo se construyen y usan los saberes en procesos participativos; por otro, el uso de tecnologías de monitoreo para la gestión y evaluación ambiental. Es un cluster que vincula lo social y lo técnico, ideal para proyectos de innovación comunitaria, ciencia ciudadana y gobernanza colaborativa.

### Temas reformulados

1. Agroecología y sistemas alimentarios sustentables

>Síntesis: Fomento de transiciones agroecológicas con enfoque en sistemas agroforestales, conservación genética y seguridad alimentaria rural.

  Puntos de acción:

  + Impulsar prácticas agroecológicas adaptadas al contexto local.
  + Fortalecer bancos de germoplasma comunitarios.
  + Capacitar en innovación de sistemas tradicionales de producción.

2. Cambio global, sostenibilidad y dinámica del paisaje
 
>Síntesis: Análisis del impacto del cambio climático y actividades humanas sobre el paisaje, con énfasis en sostenibilidad y cobertura vegetal.

  Puntos de acción:

  + Implementar monitoreo de cambios en uso de suelo y cobertura vegetal.
  + Desarrollar planes de ordenamiento territorial sostenibles.
  + Promover estrategias de adaptación al cambio climático.

3. Conservación y manejo comunitario de la biodiversidad
 
>Síntesis: Conservación ambiental basada en comunidades, enfocada en el uso sustentable de recursos forestales y relaciones socioecológicas.

  Puntos de acción:

  + Fortalecer capacidades locales para el manejo forestal sustentable.
  + Promover gobernanza comunitaria de la biodiversidad.
  + Documentar y valorar saberes locales en conservación.

4. Evaluación ambiental, restauración y manejo de ecosistemas

>Síntesis: Evaluación integral y restauración de ecosistemas terrestres y costeros para la toma de decisiones sustentables.

  Puntos de acción:

  + Establecer indicadores integrales de salud ecosistémica.
  + Diseñar proyectos de restauración ecológica con base científica.
  + Integrar criterios ecológicos en políticas de uso de suelo.

5. Estudios sociocognitivos y herramientas socioecológicas

>Síntesis: Desarrollo de metodologías participativas para entender el cambio ambiental y fomentar conciencia socioambiental.

Puntos de acción:

  + Aplicar herramientas lúdicas y multiactorales en procesos educativos.
  + Investigar percepciones locales sobre cambio ambiental.
  + Integrar ciencias cognitivas en proyectos de sustentabilidad.

6. Gestión del agua y procesos hidrológicos

>Síntesis: Gestión local e integral del agua con enfoque en seguridad hídrica y análisis de sistemas socioecológicos.

 Puntos de acción:

  + Crear comités locales para la gestión del agua.
  + Promover tecnologías de captación y uso eficiente.
  + Monitorear flujos hidrológicos con participación comunitaria.

7. Políticas y justicia socioambiental

>Síntesis: Análisis de políticas ambientales y su impacto en justicia social y bienestar humano.

  Puntos de acción:

  + Evaluar políticas públicas desde una perspectiva de equidad.
  + Incidir en el diseño de marcos legales con enfoque de justicia ambiental.
  + Promover participación ciudadana en la formulación de políticas.

8. Sistemática y ecología de insectos

>Síntesis: Investigación sobre insectos de interés médico y veterinario desde un enfoque ecológico y taxonómico.

  Puntos de acción:

  + Fortalecer colecciones biológicas y su digitalización.
  + Estudiar relaciones ecológicas entre insectos y ambientes perturbados.
  + Capacitar en identificación y monitoreo de vectores.

9. Tecnología para el monitoreo ambiental

>Síntesis: Aplicación de tecnologías avanzadas (IA, percepción remota, sensores) para el monitoreo ambiental y del comportamiento animal.
    
  Puntos de acción:

  + Desarrollar plataformas abiertas para monitoreo ambiental.
  + Integrar IA en el análisis de datos ecológicos.
  + Fomentar alianzas interdisciplinarias para innovación tecnológica.


## Actores fecuentes y relevantes


| Actor                                                        | Participación / Temas Relacionados                                                                                         |
| ------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------- |
| **Comunidades rurales y locales**                            | Agroecología, conservación comunitaria, gestión del agua, restauración ecológica, justicia socioambiental.                 |
| **Organizaciones comunitarias**                              | Conservación de biodiversidad, manejo forestal, participación en políticas, gobernanza del agua.                           |
| **Instituciones académicas y centros de investigación**      | Todos los temas (desarrollo de metodologías, sistemática de insectos, tecnologías de monitoreo, estudios socioecológicos). |
| **Tomadores de decisiones / Gobiernos locales y nacionales** | Políticas ambientales, ordenamiento territorial, justicia socioambiental, restauración, manejo del paisaje.                |
| **ONGs ambientales y de desarrollo rural**                   | Apoyo en conservación, gestión de recursos, fortalecimiento comunitario, monitoreo ambiental.                              |
| **Productores agropecuarios**                                | Agroecología, innovación productiva, seguridad alimentaria, uso sustentable del suelo y del agua.                          |
| **Instituciones de educación y formación**                   | Educación socioambiental, herramientas participativas, cambio cognitivo hacia la sustentabilidad.                          |
| **Juventudes y población escolar**                           | Educación ambiental, herramientas lúdicas, concientización sobre cambio climático y biodiversidad.                         |
| **Pueblos indígenas**                                        | Conservación basada en saberes tradicionales, manejo del territorio, gobernanza del agua y biodiversidad.                  |
| **Usuarios del agua (agrícolas, domésticos, industriales)**  | Gestión y justicia hídrica, seguridad del recurso, participación en cuencas.                                               |
| **Entidades tecnológicas / desarrolladores**                 | Aplicación de IA, sensores, percepción remota, monitoreo ambiental.                                                        |


## Actores Transversales Clave (Altamente Recurrentes)

+ Comunidades locales/rurales e indígenas
+ Gobiernos y tomadores de decisiones
+ Instituciones académicas y científicas
+ Organizaciones sociales y ONGs
+  Productores rurales / campesinos



## Matriz de actores interés

| **Categoría**                                               | **Actores**                                                                                                               | **Interés** | **Influencia** | **Estrategia recomendada**                                                       |
| ----------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ----------- | -------------- | -------------------------------------------------------------------------------- |
| **Alta Influencia / Alto Interés (Gestión cercana)**        | - Gobiernos locales y nacionales<br>- Instituciones académicas<br>- ONGs ambientales relevantes                           | Alto        | Alto           | Involucrarlos activamente en diseño, implementación y evaluación de iniciativas. |
| **Alta Influencia / Bajo Interés (Monitoreo estratégico)**  | - Instituciones tecnológicas<br>- Agencias gubernamentales no ambientales<br>- Empresas del sector hídrico o agropecuario | Bajo        | Alto           | Informar, sensibilizar y alinear intereses con metas socioambientales.           |
| **Baja Influencia / Alto Interés (Apoyo y empoderamiento)** | - Comunidades rurales e indígenas<br>- Productores agroecológicos<br>- Grupos juveniles y escolares                       | Alto        | Bajo           | Empoderar mediante capacitación, recursos, gobernanza participativa.             |
| **Baja Influencia / Bajo Interés (Seguimiento mínimo)**     | - Población urbana no organizada<br>- Actores externos no involucrados (p. ej. turistas, sector inmobiliario informal)    | Bajo        | Bajo           | Informar ocasionalmente y vigilar posibles impactos indirectos.                  |


Comunidades rurales e indígenas: Aunque su influencia institucional es baja, su interés es alto y su papel en la ejecución de proyectos es fundamental → clave empoderarlas.

Gobiernos y universidades: Actores con capacidad técnica y decisional; son indispensables para escala y sostenibilidad.

ONGs: Pueden mediar entre comunidades y Estado, facilitar procesos participativos y fortalecer capacidades locales.


```{python}
#| label: graf-act-interes 
#| echo: false  

# Definir los actores con sus niveles de interés e influencia
actores = {
    "Gobiernos\ny universidades": (8, 9),
    "ONGs ambientales": (7, 8),
    "Comunidades rurales\ne indígenas": (9, 4),
    "Productores agroecológicos": (8, 3),
    "Grupos juveniles\ny escolares": (7, 2),
    "Instituciones tecnológicas": (4, 8),
    "Agencias no ambientales": (3, 7),
    "Empresas del sector\nhídrico/agropecuario": (5, 7),
    "Población urbana\nno organizada": (2, 2),
    "Actores externos\n(turismo, inmobiliario)": (3, 3),
}

# Crear el gráfico
fig, ax = plt.subplots(figsize=(10, 8))

# Límites y líneas divisorias
ax.set_xlim(0, 10)
ax.set_ylim(0, 10)
ax.axhline(5, color='gray', linestyle='--')
ax.axvline(5, color='gray', linestyle='--')

# Etiquetas y título
ax.set_title("Matriz de Interés - Influencia de Actores Clave", fontsize=14)
ax.set_xlabel("Interés", fontsize=12)
ax.set_ylabel("Influencia", fontsize=12)

# Colocar los actores en el gráfico
for actor, (interes, influencia) in actores.items():
    ax.scatter(interes, influencia, s=100, alpha=0.7)
    ax.text(interes + 0.2, influencia, actor, fontsize=9)

# Cuadrantes
ax.text(7, 9.5, "Gestión cercana", fontsize=10, color='green')
ax.text(1, 9.5, "Apoyo / Empoderamiento", fontsize=10, color='blue')
ax.text(7, 0.5, "Monitoreo estratégico", fontsize=10, color='orange')
ax.text(1, 0.5, "Seguimiento mínimo", fontsize=10, color='gray')

plt.grid(True, linestyle=':', linewidth=0.5)
plt.tight_layout()
plt.show()


```


Qué tal un DAG de todo esto

```{python}
#| label: DAG
#| echo: false 

# Crear grafo dirigido
G = nx.DiGraph()

# Niveles de actores
nivel_1 = ["Gobiernos", "Universidades"]
nivel_2 = ["ONGs ambientales", "Instituciones tecnológicas", "Agencias no ambientales"]
nivel_3 = ["Comunidades rurales", "Pueblos indígenas", "Productores agroecológicos", "Grupos juveniles"]
nivel_4 = ["Población urbana", "Actores externos"]

# Agregar nodos con atributos de nivel
for n in nivel_1:
    G.add_node(n, level=1)
for n in nivel_2:
    G.add_node(n, level=2)
for n in nivel_3:
    G.add_node(n, level=3)
for n in nivel_4:
    G.add_node(n, level=4)

# Relaciones entre actores
edges = [
    ("Gobiernos", "ONGs ambientales"),
    ("Gobiernos", "Agencias no ambientales"),
    ("Gobiernos", "Instituciones tecnológicas"),
    ("Gobiernos", "Comunidades rurales"),
    ("Gobiernos", "Pueblos indígenas"),

    ("Universidades", "ONGs ambientales"),
    ("Universidades", "Instituciones tecnológicas"),
    ("Universidades", "Productores agroecológicos"),
    ("Universidades", "Grupos juveniles"),

    ("ONGs ambientales", "Comunidades rurales"),
    ("ONGs ambientales", "Pueblos indígenas"),
    ("ONGs ambientales", "Productores agroecológicos"),

    ("Instituciones tecnológicas", "Universidades"),
    ("Instituciones tecnológicas", "Productores agroecológicos"),

    ("Comunidades rurales", "Pueblos indígenas"),
    ("Grupos juveniles", "Población urbana"),
]

G.add_edges_from(edges)

# Posiciones de nodos según nivel
pos = nx.multipartite_layout(G, subset_key="level")

# Colores por nivel
color_map = []
for node in G.nodes(data=True):
    level = node[1]['level']
    if level == 1:
        color_map.append("#4CAF50")  # verde - alta influencia
    elif level == 2:
        color_map.append("#FFC107")  # amarillo - intermediarios
    elif level == 3:
        color_map.append("#2196F3")  # azul - actores locales
    else:
        color_map.append("#9E9E9E")  # gris - periféricos

# Dibujar DAG
plt.figure(figsize=(12, 8))
nx.draw(G, pos, with_labels=True, node_color=color_map, arrows=True,
        node_size=2000, font_size=10, font_weight='bold', edge_color='gray')

plt.title("DAG: Relaciones entre actores clave en la sostenibilidad socioambiental", fontsize=14)
plt.axis('off')
plt.tight_layout()
plt.show()
```


### Agregando relaciones indirectas

Dejé a los actores externos (como turismo, sector inmobiliario) desconectados intencionalmente porque, en el contexto de tu matriz de interés–influencia:

+ Tienen bajo interés y baja influencia directa positiva.
+ Su participación no suele ser proactiva en agendas de sostenibilidad.
+ Su impacto es más indirecto (por ejemplo, presión sobre el suelo, recursos hídricos o biodiversidad).
+ Sin embargo, esto no significa que deban ignorarse. En una versión más estratégica del DAG, podemos:
+ Agregar conexiones de vigilancia o conflicto potencial, especialmente desde:
+ Comunidades locales → Actores externos (por impacto territorial).
+ Gobiernos / ONGs → Actores externos (regulación o mitigación de impactos).

 
```{python}
#| label: DAG-ext 
#| echo: false

# Agregar relaciones indirectas o de conflicto potencial con actores externos
edges_conflicto = [
    ("Comunidades rurales", "Actores externos"),
    ("Pueblos indígenas", "Actores externos"),
    ("Gobiernos", "Actores externos"),
    ("ONGs ambientales", "Actores externos"),
]

# Agregamos las nuevas relaciones al grafo
G.add_edges_from(edges_conflicto)

# Redibujar el DAG con las nuevas conexiones
plt.figure(figsize=(12, 8))

# Dibujar nodos
nx.draw_networkx_nodes(G, pos, node_color=color_map, node_size=2000)

# Dibujar etiquetas
nx.draw_networkx_labels(G, pos, font_size=10, font_weight='bold')

# Separar los tipos de bordes
edges_principales = [e for e in G.edges() if e not in edges_conflicto]
edges_conflicto_color = "gray"
edges_principales_color = "black"

# Dibujar bordes principales
nx.draw_networkx_edges(G, pos, edgelist=edges_principales, edge_color=edges_principales_color, arrows=True)

# Dibujar bordes de conflicto/potencial vigilancia (en gris punteado)
nx.draw_networkx_edges(
    G, pos, edgelist=edges_conflicto,
    edge_color=edges_conflicto_color,
    style='dashed', arrows=True
)

plt.title("DAG: Relaciones entre actores clave, incluyendo actores externos", fontsize=14)
plt.axis('off')
plt.tight_layout()
plt.show()


```



## Temas y actores

```{python}
#| label: DAG-t-act
#| echo: false

# Crear la matriz con columnas de Tema, Actor, Nivel de Interés e Influencia
data = [
    # Agroecología
    ("Agroecología y sistemas alimentarios sustentables", "Gubernamentales (SADER, locales)", "Medio", "Alto"),
    ("Agroecología y sistemas alimentarios sustentables", "Comunidades rurales, ejidos", "Alto", "Alto"),
    ("Agroecología y sistemas alimentarios sustentables", "Academia (INIFAP, IPN)", "Alto", "Medio"),
    ("Agroecología y sistemas alimentarios sustentables", "Agroindustria, certificadoras", "Medio", "Alto"),
    ("Agroecología y sistemas alimentarios sustentables", "FAO, Slow Food", "Alto", "Medio"),
    
    # Cambio climático
    ("Cambio climático y uso del suelo", "SEMARNAT, INECC", "Alto", "Alto"),
    ("Cambio climático y uso del suelo", "Redes comunitarias", "Alto", "Medio"),
    ("Cambio climático y uso del suelo", "Academia (UNAM, CIESAS)", "Alto", "Medio"),
    ("Cambio climático y uso del suelo", "Sector inmobiliario, energético", "Alto", "Alto"),
    ("Cambio climático y uso del suelo", "PNUD, GIZ, WWF", "Alto", "Medio"),

    # Conservación
    ("Conservación y manejo comunitario de la biodiversidad", "CONANP, INPI", "Medio", "Alto"),
    ("Conservación y manejo comunitario de la biodiversidad", "Comunidades indígenas, ejidos", "Alto", "Alto"),
    ("Conservación y manejo comunitario de la biodiversidad", "CONABIO, investigadores", "Alto", "Medio"),
    ("Conservación y manejo comunitario de la biodiversidad", "Biocomercio, ecoturismo", "Medio", "Medio"),
    ("Conservación y manejo comunitario de la biodiversidad", "TNC, Rainforest Alliance", "Alto", "Medio"),

    # Restauración
    ("Evaluación ambiental, restauración y manejo de ecosistemas", "SEMARNAT, ASEA", "Alto", "Alto"),
    ("Evaluación ambiental, restauración y manejo de ecosistemas", "Brigadas y restauradores locales", "Alto", "Medio"),
    ("Evaluación ambiental, restauración y manejo de ecosistemas", "Ecólogos, académicos", "Alto", "Medio"),
    ("Evaluación ambiental, restauración y manejo de ecosistemas", "Consultoras, reforestadoras privadas", "Medio", "Alto"),
    ("Evaluación ambiental, restauración y manejo de ecosistemas", "IUCN, Reforestamos México", "Alto", "Medio"),

    # Educación
    ("Educación ambiental y comunicación", "SEP, gobiernos locales", "Medio", "Alto"),
    ("Educación ambiental y comunicación", "Escuelas, colectivos locales", "Alto", "Medio"),
    ("Educación ambiental y comunicación", "Educadores ambientales", "Alto", "Medio"),
    ("Educación ambiental y comunicación", "Medios con RSE", "Medio", "Medio"),
    ("Educación ambiental y comunicación", "UNESCO, Earth Charter", "Alto", "Medio"),

    # Justicia ambiental
    ("Justicia ambiental y gobernanza participativa", "CNDH, SCJN", "Medio", "Alto"),
    ("Justicia ambiental y gobernanza participativa", "Defensores del territorio, OSCs", "Alto", "Medio"),
    ("Justicia ambiental y gobernanza participativa", "Antropólogos, juristas ambientales", "Alto", "Medio"),
    ("Justicia ambiental y gobernanza participativa", "Firmas legales privadas", "Medio", "Alto"),
    ("Justicia ambiental y gobernanza participativa", "Global Witness, Amnistía", "Alto", "Medio"),

    # Transición energética
    ("Transición energética y sostenibilidad territorial", "SENER, CFE", "Alto", "Alto"),
    ("Transición energética y sostenibilidad territorial", "Comunidades afectadas", "Alto", "Medio"),
    ("Transición energética y sostenibilidad territorial", "Investigadores de energía", "Alto", "Medio"),
    ("Transición energética y sostenibilidad territorial", "Empresas renovables", "Alto", "Alto"),
    ("Transición energética y sostenibilidad territorial", "OXFAM, International Rivers", "Alto", "Medio"),
]

# Crear DataFrame
df = pd.DataFrame(data, columns=["Tema", "Actor", "Nivel de Interés", "Nivel de Influencia"])

# Guardar como CSV
csv_path = "data/Matriz_Temas_Actores_Interes_Influencia.csv"
df.to_csv(csv_path, index=False)

# df = pd.read_csv(csv_path)

# Crear un grafo dirigido (DAG)
G = nx.DiGraph()

# Temas
temas = df["Tema"].unique()

# Agregar nodos de temas y actores
for tema in temas:
    G.add_node(tema, type='tema')

for _, row in df.iterrows():
    G.add_node(row["Actor"], type='actor')
    G.add_edge(row["Actor"], row["Tema"])  # Conexión desde actor hacia tema

# Definir posiciones para los nodos
pos = nx.spring_layout(G, seed=42, k=0.8)

# Dibujar nodos y bordes
plt.figure(figsize=(18, 12))
tema_nodes = [n for n in G.nodes if G.nodes[n]['type'] == 'tema']
actor_nodes = [n for n in G.nodes if G.nodes[n]['type'] == 'actor']

nx.draw_networkx_nodes(G, pos, nodelist=tema_nodes, node_shape='s', node_size=2000, label='Temas')
nx.draw_networkx_nodes(G, pos, nodelist=actor_nodes, node_color='lightblue', node_size=1200, label='Actores')
nx.draw_networkx_edges(G, pos, arrows=True, arrowstyle='->', arrowsize=15)
nx.draw_networkx_labels(G, pos, font_size=10)

plt.title("DAG: Relación entre Temas y Actores", fontsize=16)
plt.axis('off')
plt.tight_layout()
plt.show()
 
```
 
